"""
Template management module.

This module provides classes for loading and managing templates from files.
These templates can be used to format output from LLMs, create reports,
or build other structured content.

Example usage:
    from pathlib import Path
    from core.templates.managers import TemplateManager
    
    # Create a template manager for the current module's directory
    current_file = Path(__file__)
    template_manager = TemplateManager(current_file)
    
    # Load a template
    template_manager.check_("example.html")
    template_content = template_manager.content
    
    # Format the template with variables
    from string import Template
    template = Template(template_content)
    result = template.substitute(
        title="Analysis Report",
        subtitle="Generated by LLM",
        date="2025-04-17",
        toc="<li>Introduction</li><li>Analysis</li><li>Conclusion</li>",
        description="An automated analysis report.",
        content_slides="<div class='slide'>...</div>",
        summary="<li>Key finding 1</li><li>Key finding 2</li>",
        conclusion="The analysis shows promising results.",
        footer="Generated on 2025-04-17"
    )
"""

from pathlib import Path


class TemplateManager:
    """
    Manager for file-based templates.
    
    This class provides functionality for loading templates from files.
    It handles file path resolution and validation, making it easier to
    work with template files in a consistent way.
    
    Attributes:
        current_directory (Path): The directory containing the templates
        file_path (Path): The path to the currently selected template file
        
    ファイルベースのテンプレートのマネージャー。
    
    このクラスは、ファイルからテンプレートをロードするための機能を提供します。
    ファイルパスの解決と検証を処理し、一貫した方法でテンプレートファイルを
    扱いやすくします。
    """

    def __init__(self, path: Path) -> None:
        """
        Initialize a template manager.
        
        Args:
            path (Path): A path object pointing to a file in the templates directory
            
        Example:
            >>> from pathlib import Path
            >>> current_file = Path(__file__)
            >>> template_manager = TemplateManager(current_file)
            
        テンプレートマネージャーを初期化します。
        
        引数：
            path (Path): テンプレートディレクトリ内のファイルを指すパスオブジェクト
        """
        self.current_directory = path.parent
        self.file_path = None

    def check_(self, file_name):
        """
        Check if a template file exists and set it as the current template.
        
        This method resolves the full path to the template file, checks if it
        exists, and sets it as the current template if it does.
        
        Args:
            file_name (str): The name of the template file
            
        Raises:
            Exception: If the template file does not exist
            
        Example:
            >>> template_manager.check_("example.html")
            >>> # Now the template is ready to be accessed
            
        テンプレートファイルが存在するかを確認し、それを現在のテンプレートとして設定します。
        
        このメソッドは、テンプレートファイルへのフルパスを解決し、それが存在するかを
        チェックし、存在する場合は現在のテンプレートとして設定します。
        """
        self.file_path = self.current_directory / file_name
        if not self.file_path.exists():
            raise Exception("そのようなtemplateはありません")

    @property
    def content(self):
        """
        Get the content of the current template file.
        
        This property reads the content of the current template file and
        returns it as a string.
        
        Returns:
            str: The content of the template file
            
        Raises:
            Exception: If check_() has not been called to set a template file
            
        Example:
            >>> template_manager.check_("example.html")
            >>> template_content = template_manager.content
            >>> # Now you can format the template content
            
        現在のテンプレートファイルのコンテンツを取得します。
        
        このプロパティは、現在のテンプレートファイルのコンテンツを読み込み、
        文字列として返します。
        """
        if self.file_path is None:
            raise Exception("取得の前にcheck_を実行して下さい。")
        with self.file_path.open() as f:
            return f.read()
